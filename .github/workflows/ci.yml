name: CI
on:
  push:
      branches:
        - master
        - actions-poetry
  pull_request:
      branches:
        - master

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Poetry and then black
        run: |
          pip install wheel
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          echo "::add-path::$HOME/.poetry/bin"
          
      - name: Check manim formatting
        run: poetry install
      - name: Check manim formatting
        run: poetry run black --check --diff manim

      - name: Check tests formatting
        run: poetry run black --check --diff tests

      - name: Check examples formatting
        run: poetry run black --check --diff example_scenes

  test:
    runs-on: ${{ matrix.os }}
    env:
       POETRY_VIRTUALENVS_CREATE: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.6,3.7, 3.8]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        run: |
          pip install wheel
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
          sudo apt-get -y install texlive texlive-latex-extra texlive-fonts-extra texlive-latex-recommended texlive-science texlive-fonts-extra tipa
          echo "::add-path::$HOME/.poetry/bin"

      - name: Install system dependencies (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl readline ffmpeg sox pyenv pyenv-virtualenv
          brew cask install basictex
          eval "$(/usr/libexec/path_helper -s)"
          sudo tlmgr update --self
          sudo tlmgr install standalone preview doublestroke relsize fundus-calligra wasysym physics dvisvgm.x86_64-darwin dvisvgm rsfs wasy cm-super
          echo "::add-path::$HOME/.poetry/bin"
          echo "::set-env name=PATH::$PATH"
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest https://ci.appveyor.com/api/projects/yihui/tinytex/artifacts/TinyTeX.zip?job=image:%20Visual%20Studio%202019 -O TinyTex.zip
          Expand-Archive -LiteralPath "$PWD\TinyTex.zip" -DestinationPath "$env:APPDATA\LatexWindows"
          $env:Path = "$env:APPDATA\LatexWindows\TinyTeX\bin\win32;$($env:PATH)"
          tlmgr install standalone preview doublestroke ms setspace rsfs relsize ragged2e fundus-calligra microtype wasysym physics dvisvgm jknapltx wasy cm-super babel-english
          echo "Completed Latex Install Sox"
          Invoke-WebRequest https://downloads.sourceforge.net/project/sox/sox/14.4.2/sox-14.4.2-win32.zip -SkipCertificateCheck -UserAgent "pwsh" -O SoX.zip
          7z x "$PWD\SoX.zip" -o"$env:APPDATA\SoX"
          $env:Path ="$env:APPDATA\SoX\sox-14.4.2;$($env:PATH)"
          Invoke-WebRequest https://ffmpeg.zeranoe.com/builds/win64/static/ffmpeg-4.3.1-win64-static.zip -O ffmpeg-4.3.1-win64-static.zip
          7z x "$PWD\ffmpeg-4.3.1-win64-static.zip" -o"$env:APPDATA\FFmpeg"
          $env:Path = "$env:APPDATA\FFmpeg\ffmpeg-4.3.1-win64-static\bin;$($env:PATH)"
          $env:Path = "$env:USERPROFILE\.poetry\bin;$($env:PATH)"
          echo "::set-env name=Path::$env:Path"
          

      - name: Install manim
        run: |
          poetry install

      - name: Run tests
        run: |
          poetry run pytest
