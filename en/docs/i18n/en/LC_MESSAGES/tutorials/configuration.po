msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: lokalise.com\n"
"Project-Id-Version: Manim\n"
"PO-Revision-Date: 2021-09-29 06:36\n"
"Last-Translator: lokalise.com\n"
"Language-Team: lokalise.com\n\n"
"Language: en\n"

msgid "The global ``config`` object is meant to be the single source of truth for all config options.  All of the other ways of setting config options ultimately change the values of the global ``config`` object."
msgstr "The global ``config`` object is meant to be the single source of truth for all config options.  All of the other ways of setting config options ultimately change the values of the global ``config`` object."

msgid "Manim will look for a ``manim.cfg`` config file in the same directory as the file being rendered, and **not** in the directory of execution.  For example,"
msgstr "Manim will look for a ``manim.cfg`` config file in the same directory as the file being rendered, and **not** in the directory of execution.  For example,"

msgid "The names of the configuration options admissible in config files are exactly the same as the **long names** of the corresponding command- line flags.  For example, the ``-c`` and ``--background_color`` flags are interchangeable, but the config file only accepts :code:`background_color` as an admissible option."
msgstr "The names of the configuration options admissible in config files are exactly the same as the **long names** of the corresponding command- line flags.  For example, the ``-c`` and ``--background_color`` flags are interchangeable, but the config file only accepts :code:`background_color` as an admissible option."

msgid "MacOS: :code:`UserDirectory`/.config/manim/manim.cfg"
msgstr "MacOS: :code:`UserDirectory`/.config/manim/manim.cfg"

msgid "A list of all config options"
msgstr "A list of all config options"

msgid "The user-wide config file lives in a special folder, depending on the operating system."
msgstr "The user-wide config file lives in a special folder, depending on the operating system."

msgid "Do not store scene scripts in the same folder as the user-wide config file.  In this case, the behavior is undefined."
msgstr "Do not store scene scripts in the same folder as the user-wide config file.  In this case, the behavior is undefined."

msgid "The file described here is called the **folder-wide** config file because it affects all scene scripts found in the same folder."
msgstr "The file described here is called the **folder-wide** config file because it affects all scene scripts found in the same folder."

msgid "The rest of the CLI flags are processed."
msgstr "The rest of the CLI flags are processed."

msgid "Whenever you use manim from anywhere in the system, manim will look for a user-wide config file and read its configuration."
msgstr "Whenever you use manim from anywhere in the system, manim will look for a user-wide config file and read its configuration."

msgid "Windows: :code:`UserDirectory`/AppData/Roaming/Manim/manim.cfg"
msgstr "Windows: :code:`UserDirectory`/AppData/Roaming/Manim/manim.cfg"

msgid "The ManimConfig class"
msgstr "The ManimConfig class"

msgid "As the last example shows, executing manim from the command-line may involve using many flags at the same time.  This may become a nuisance if you must execute the same script many times in a short time period, for example when making small incremental tweaks to your scene script.  For this purpose, manim can also be configured using a configuration file.  A configuration file is a file ending with the suffix ``.cfg``."
msgstr "As the last example shows, executing manim from the command-line may involve using many flags at the same time.  This may become a nuisance if you must execute the same script many times in a short time period, for example when making small incremental tweaks to your scene script.  For this purpose, manim can also be configured using a configuration file.  A configuration file is a file ending with the suffix ``.cfg``."

msgid "The following example specifies the output file name (with the :code:`-o` flag), renders only the first ten animations (:code:`-n` flag) with a white background (:code:`-c` flag), and saves the animation as a .gif instead of as a .mp4 file (:code:`-i` flag).  It uses the default quality and does not try to open the file after it is rendered."
msgstr "The following example specifies the output file name (with the :code:`-o` flag), renders only the first ten animations (:code:`-n` flag) with a white background (:code:`-c` flag), and saves the animation as a .gif instead of as a .mp4 file (:code:`-i` flag).  It uses the default quality and does not try to open the file after it is rendered."

msgid "Most classes, including :class:`.Camera`, :class:`.Mobject`, and :class:`.Animation`, read some of their default configuration from the global ``config``."
msgstr "Most classes, including :class:`.Camera`, :class:`.Mobject`, and :class:`.Animation`, read some of their default configuration from the global ``config``."

msgid "Each of the subcommands has its own help page which can be"
msgstr "Each of the subcommands has its own help page which can be"

msgid "A list of all CLI flags"
msgstr "A list of all CLI flags"

msgid "The following example illustrates the video resolution chosen for examples rendered in our documentation with a reference frame."
msgstr "The following example illustrates the video resolution chosen for examples rendered in our documentation with a reference frame."

msgid "All files found in the previous two steps are parsed in a single :class:`ConfigParser` object, called ``parser``.  This is where *cascading* happens."
msgstr "All files found in the previous two steps are parsed in a single :class:`ConfigParser` object, called ``parser``.  This is where *cascading* happens."

msgid "This asks manim to search for a Scene class called :code:`SceneName` inside the file <file.py> and render it.  One can also specify the render quality by using the flags :code:`-ql`, :code:`-qm`, :code:`-qh`, or :code:`-qk`, for low, medium, high, and 4k quality, respectively."
msgstr "This asks manim to search for a Scene class called :code:`SceneName` inside the file <file.py> and render it.  One can also specify the render quality by using the flags :code:`-ql`, :code:`-qm`, :code:`-qh`, or :code:`-qk`, for low, medium, high, and 4k quality, respectively."

msgid "Now, executing the following command"
msgstr "Now, executing the following command"

msgid "Cascading config files"
msgstr "Cascading config files"

msgid "What happens if you execute manim and it finds both a folder-wide config file and a user-wide config file?  Manim will read both files, but if they are incompatible, **the folder-wide file takes precedence**."
msgstr "What happens if you execute manim and it finds both a folder-wide config file and a user-wide config file?  Manim will read both files, but if they are incompatible, **the folder-wide file takes precedence**."

msgid ":class:`logging.Logger` is instantiated to create manim's global ``logger`` object. It is configured using the \"logger\" section of the parser, i.e. ``parser['logger']``."
msgstr ":class:`logging.Logger` is instantiated to create manim's global ``logger`` object. It is configured using the \"logger\" section of the parser, i.e. ``parser['logger']``."

msgid "To use a configuration file when rendering your scene, you must create a file with name ``manim.cfg`` in the same directory as your scene code."
msgstr "To use a configuration file when rendering your scene, you must create a file with name ``manim.cfg`` in the same directory as your scene code."

msgid "The CLI flags are parsed and fed into ``config`` via :meth:`~ManimConfig.digest_args`."
msgstr "The CLI flags are parsed and fed into ``config`` via :meth:`~ManimConfig.digest_args`."

msgid "Command-line arguments"
msgstr "Command-line arguments"

msgid "With so many different ways of configuring manim, it can be difficult to know when each config option is being set.  In fact, this will depend on how manim is being used."
msgstr "With so many different ways of configuring manim, it can be difficult to know when each config option is being set.  In fact, this will depend on how manim is being used."

msgid "The user-wide and folder-wide files are loaded, if they exist."
msgstr "The user-wide and folder-wide files are loaded, if they exist."

msgid "and the following folder-wide file"
msgstr "and the following folder-wide file"

msgid "Another frequent flag is ``-p`` (\"preview\"), which makes manim show the rendered video right after it's done rendering."
msgstr "Another frequent flag is ``-p`` (\"preview\"), which makes manim show the rendered video right after it's done rendering."

msgid "The user config file"
msgstr "The user config file"

msgid "Then, executing :code:`manim <file.py> SceneName` will be equivalent to not using any config files and executing"
msgstr "Then, executing :code:`manim <file.py> SceneName` will be equivalent to not using any config files and executing"

msgid "If manim is imported from a module, then the configuration system will follow these steps:"
msgstr "If manim is imported from a module, then the configuration system will follow these steps:"

msgid "For example, take the following user-wide config file"
msgstr "For example, take the following user-wide config file"

msgid "The config file must start with the section header ``[CLI]``.  The configuration options under this header have the same name as the CLI flags, and serve the same purpose.  Take for example the following config file."
msgstr "The config file must start with the section header ``[CLI]``.  The configuration options under this header have the same name as the CLI flags, and serve the same purpose.  Take for example the following config file."

msgid "Config files are read with the standard python library ``configparser``. In particular, they will ignore any line that starts with a pound symbol ``#``."
msgstr "Config files are read with the standard python library ``configparser``. In particular, they will ignore any line that starts with a pound symbol ``#``."

msgid "To summarize, the order of precedence for configuration options, from lowest to highest precedence is:"
msgstr "To summarize, the order of precedence for configuration options, from lowest to highest precedence is:"

msgid "is equivalent to executing the following command, provided that ``manim.cfg`` is in the same directory as <file.py>,"
msgstr "is equivalent to executing the following command, provided that ``manim.cfg`` is in the same directory as <file.py>,"

msgid "If manim is being invoked from the command-line, all of the previous steps happen, and are complemented by:"
msgstr "If manim is being invoked from the command-line, all of the previous steps happen, and are complemented by:"

msgid "The config file **must** be named ``manim.cfg``. Currently, manim does not support config files with any other name."
msgstr "The config file **must** be named ``manim.cfg``. Currently, manim does not support config files with any other name."

msgid ":class:`.ManimConfig` is designed to keep internal consistency.  For example, setting ``frame_y_radius`` will affect ``frame_height``:"
msgstr ":class:`.ManimConfig` is designed to keep internal consistency.  For example, setting ``frame_y_radius`` will affect ``frame_height``:"

msgid "Manim provides an extensive configuration system that allows it to adapt to many different use cases.  There are many configuration options that can be configured at different times during the scene rendering process.  Each option can be configured programmatically via `the ManimConfig class`_, or at the time of command invocation via `command-line arguments`_, or at the time the library is first imported via `the config files`_."
msgstr "Manim provides an extensive configuration system that allows it to adapt to many different use cases.  There are many configuration options that can be configured at different times during the scene rendering process.  Each option can be configured programmatically via `the ManimConfig class`_, or at the time of command invocation via `command-line arguments`_, or at the time the library is first imported via `the config files`_."

msgid "any programmatic changes made after the config system is set."
msgstr "any programmatic changes made after the config system is set."

msgid "These flags set the values of the config options ``config.pixel_width``, ``config.pixel_height``, ``config.frame_rate``, and ``config.quality``."
msgstr "These flags set the values of the config options ``config.pixel_width``, ``config.pixel_height``, ``config.frame_rate``, and ``config.quality``."

msgid "The new parser is fed into ``config``."
msgstr "The new parser is fed into ``config``."

msgid "Library-wide config file,"
msgstr "Library-wide config file,"

msgid "The ``-p`` flag does not change any properties of the global ``config`` dict.  The ``-p`` flag is only a command-line convenience."
msgstr "The ``-p`` flag does not change any properties of the global ``config`` dict.  The ``-p`` flag is only a command-line convenience."

msgid "Linux: :code:`UserDirectory`/.config/manim/manim.cfg"
msgstr "Linux: :code:`UserDirectory`/.config/manim/manim.cfg"

msgid "A user may have many **folder-wide** config files, one per folder, but only one **user-wide** config file.  Different users in the same computer may each have their own user-wide config file."
msgstr "A user may have many **folder-wide** config files, one per folder, but only one **user-wide** config file.  Different users in the same computer may each have their own user-wide config file."

msgid ":class:`ManimConfig` is instantiated to create the global ``config`` object."
msgstr ":class:`ManimConfig` is instantiated to create the global ``config`` object."

msgid "The most direct way of configuring manim is via the global ``config`` object, which is an instance of :class:`.ManimConfig`.  Each property of this class is a config option that can be accessed either with standard attribute syntax or with dict-like syntax:"
msgstr "The most direct way of configuring manim is via the global ``config`` object, which is an instance of :class:`.ManimConfig`.  Each property of this class is a config option that can be accessed either with standard attribute syntax or with dict-like syntax:"

msgid "The library-wide config file is loaded."
msgstr "The library-wide config file is loaded."

msgid "The former is preferred; the latter is provided mostly for backwards compatibility."
msgstr "The former is preferred; the latter is provided mostly for backwards compatibility."

msgid "will use the config file found in ``path/to/file.py``, if any.  It will **not** use the config file found in the current working directory, even if it exists. In this way, the user may keep different config files for different scenes or projects, and execute them with the right configuration from anywhere in the system."
msgstr "will use the config file found in ``path/to/file.py``, if any.  It will **not** use the config file found in the current working directory, even if it exists. In this way, the user may keep different config files for different scenes or projects, and execute them with the right configuration from anywhere in the system."

msgid "Since config files are meant to replace CLI flags, all CLI flags can be set via a config file.  Moreover, any config option can be set via a config file, whether or not it has an associated CLI flag.  For a list of all CLI flags and all config options, see the bottom of this document."
msgstr "Since config files are meant to replace CLI flags, all CLI flags can be set via a config file.  Moreover, any config option can be set via a config file, whether or not it has an associated CLI flag.  For a list of all CLI flags and all config options, see the bottom of this document."

msgid "As explained in the previous section, a :code:`manim.cfg` config file only affects the scene scripts in its same folder.  However, the user may also create a special config file that will apply to all scenes rendered by that user. This is referred to as the **user-wide** config file, and it will apply regardless of where manim is executed from, and regardless of where the scene script is stored."
msgstr "As explained in the previous section, a :code:`manim.cfg` config file only affects the scene scripts in its same folder.  However, the user may also create a special config file that will apply to all scenes rendered by that user. This is referred to as the **user-wide** config file, and it will apply regardless of where manim is executed from, and regardless of where the scene script is stored."

msgid "Both ``logger`` and ``config`` are exposed to the user."
msgstr "Both ``logger`` and ``config`` are exposed to the user."

msgid "To render a scene in high quality, but only output the last frame of the scene instead of the whole video, you can execute"
msgstr "To render a scene in high quality, but only output the last frame of the scene instead of the whole video, you can execute"

msgid "The ``parser`` from step 3 is fed into the ``config`` from step 5 via :meth:`ManimConfig.digest_parser`."
msgstr "The ``parser`` from step 3 is fed into the ``config`` from step 5 via :meth:`ManimConfig.digest_parser`."

msgid "There is also a **library-wide** config file that determines manim's default behavior and applies to every user of the library.  It has the least precedence, so any config options in the user-wide and any folder-wide files will override the library-wide file.  This is referred to as the *cascading* config file system."
msgstr "There is also a **library-wide** config file that determines manim's default behavior and applies to every user of the library.  It has the least precedence, so any config options in the user-wide and any folder-wide files will override the library-wide file.  This is referred to as the *cascading* config file system."

msgid "Any command-line flags have precedence over any config file.  For example, using the previous two config files and executing :code:`manim -c RED <file.py> SceneName` is equivalent to not using any config files and executing"
msgstr "Any command-line flags have precedence over any config file.  For example, using the previous two config files and executing :code:`manim -c RED <file.py> SceneName` is equivalent to not using any config files and executing"

msgid "Order of operations"
msgstr "Order of operations"

msgid "user-wide config file, if it exists,"
msgstr "user-wide config file, if it exists,"

msgid "Here, :code:`UserDirectory` is the user's home folder."
msgstr "Here, :code:`UserDirectory` is the user's home folder."

msgid "If the ``--config_file`` flag was used, a new :class:`ConfigParser` object is created with the contents of the library-wide file, the user-wide file if it exists, and the file passed via ``--config_file``.  In this case, the folder-wide file, if it exists, is ignored."
msgstr "If the ``--config_file`` flag was used, a new :class:`ConfigParser` object is created with the contents of the library-wide file, the user-wide file if it exists, and the file passed via ``--config_file``.  In this case, the folder-wide file, if it exists, is ignored."

msgid "folder-wide config file, if it exists OR custom config file, if passed via ``--config_file``,"
msgstr "folder-wide config file, if it exists OR custom config file, if passed via ``--config_file``,"

msgid "other CLI flags, and"
msgstr "other CLI flags, and"

msgid "The config files"
msgstr "The config files"

msgid "There are many more command-line flags that manim accepts.  All the possible flags are shown by executing ``manim render --help``.  A complete list of CLI flags is at the end of this document."
msgstr "There are many more command-line flags that manim accepts.  All the possible flags are shown by executing ``manim render --help``.  A complete list of CLI flags is at the end of this document."

msgid "**The user should not try to modify the library-wide file**. Contributors should receive explicit confirmation from the core developer team before modifying it."
msgstr "**The user should not try to modify the library-wide file**. Contributors should receive explicit confirmation from the core developer team before modifying it."

msgid "Usually, manim is run from the command-line by executing"
msgstr "Usually, manim is run from the command-line by executing"
