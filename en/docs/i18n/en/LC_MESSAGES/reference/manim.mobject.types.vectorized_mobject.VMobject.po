msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: lokalise.com\n"
"Project-Id-Version: Manim\n"
"PO-Revision-Date: 2021-09-29 06:36\n"
"Last-Translator: lokalise.com\n"
"Language-Team: lokalise.com\n\n"
"Language: en\n"

msgid "Return the starting anchors of the bezier curves."
msgstr "Return the starting anchors of the bezier curves."

msgid "Given two sets of anchors and handles, process them to set them as anchors and handles of the VMobject."
msgstr "Given two sets of anchors and handles, process them to set them as anchors and handles of the VMobject."

msgid "index of the desired bezier curve."
msgstr "index of the desired bezier curve."

msgid "Determine if two points are close enough to be considered equal."
msgstr "Determine if two points are close enough to be considered equal."

msgid "Given an array of points, set them as corner of the vmobject."
msgstr "Given an array of points, set them as corner of the vmobject."

msgid ":obj:`gen_subpaths_from_points_2d <manim.mobject.types.vectorized_mobject.VMobject.gen_subpaths_from_points_2d>`"
msgstr ":obj:`gen_subpaths_from_points_2d <manim.mobject.types.vectorized_mobject.VMobject.gen_subpaths_from_points_2d>`"

msgid "Direction from where the gradient is applied."
msgstr "Direction from where the gradient is applied."

msgid "Creates a smooth curve from given points and add it to the VMobject."
msgstr "Creates a smooth curve from given points and add it to the VMobject."

msgid ":obj:`get_points_defining_boundary <manim.mobject.types.vectorized_mobject.VMobject.get_points_defining_boundary>`"
msgstr ":obj:`get_points_defining_boundary <manim.mobject.types.vectorized_mobject.VMobject.get_points_defining_boundary>`"

msgid ":obj:`generate_rgbas_array <manim.mobject.types.vectorized_mobject.VMobject.generate_rgbas_array>`"
msgstr ":obj:`generate_rgbas_array <manim.mobject.types.vectorized_mobject.VMobject.generate_rgbas_array>`"

msgid "The keyword arguments passed to :meth:`get_nth_curve_function_with_length`"
msgstr "The keyword arguments passed to :meth:`get_nth_curve_function_with_length`"

msgid ":obj:`insert_n_curves_to_point_list <manim.mobject.types.vectorized_mobject.VMobject.insert_n_curves_to_point_list>`"
msgstr ":obj:`insert_n_curves_to_point_list <manim.mobject.types.vectorized_mobject.VMobject.insert_n_curves_to_point_list>`"

msgid ":meth:`~.VMobject.set_sheen_direction`"
msgstr ":meth:`~.VMobject.set_sheen_direction`"

msgid ":obj:`consider_points_equals_2d <manim.mobject.types.vectorized_mobject.VMobject.consider_points_equals_2d>`"
msgstr ":obj:`consider_points_equals_2d <manim.mobject.types.vectorized_mobject.VMobject.consider_points_equals_2d>`"

msgid "If 0 or more than 2 points are given."
msgstr "If 0 or more than 2 points are given."

msgid ":obj:`clear_points <manim.mobject.types.vectorized_mobject.VMobject.clear_points>`"
msgstr ":obj:`clear_points <manim.mobject.types.vectorized_mobject.VMobject.clear_points>`"

msgid "If ``alpha`` is not between 0 and 1."
msgstr "If ``alpha`` is not between 0 and 1."

msgid "Returns the expression of the nth curve along with its (approximate) length."
msgstr "Returns the expression of the nth curve along with its (approximate) length."

msgid "Bezier control points."
msgstr "Bezier control points."

msgid "Points generated."
msgstr "Points generated."

msgid ":obj:`append_points <manim.mobject.types.vectorized_mobject.VMobject.append_points>`"
msgstr ":obj:`append_points <manim.mobject.types.vectorized_mobject.VMobject.append_points>`"

msgid ":obj:`set_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.set_sheen_direction>`"
msgstr ":obj:`set_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.set_sheen_direction>`"

msgid ":obj:`force_direction <manim.mobject.types.vectorized_mobject.VMobject.force_direction>`"
msgstr ":obj:`force_direction <manim.mobject.types.vectorized_mobject.VMobject.force_direction>`"

msgid ":obj:`get_stroke_opacities <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_opacities>`"
msgstr ":obj:`get_stroke_opacities <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_opacities>`"

msgid "Applies a color gradient from a direction."
msgstr "Applies a color gradient from a direction."

msgid ":obj:`get_points <manim.mobject.types.vectorized_mobject.VMobject.get_points>`"
msgstr ":obj:`get_points <manim.mobject.types.vectorized_mobject.VMobject.get_points>`"

msgid "Number of sample points per curve used to approximate the length. More points result in a better approximation."
msgstr "Number of sample points per curve used to approximate the length. More points result in a better approximation."

msgid "index of the desired curve."
msgstr "index of the desired curve."

msgid ":obj:`set_anchors_and_handles <manim.mobject.types.vectorized_mobject.VMobject.set_anchors_and_handles>`"
msgstr ":obj:`set_anchors_and_handles <manim.mobject.types.vectorized_mobject.VMobject.set_anchors_and_handles>`"

msgid ":obj:`gen_cubic_bezier_tuples_from_points <manim.mobject.types.vectorized_mobject.VMobject.gen_cubic_bezier_tuples_from_points>`"
msgstr ":obj:`gen_cubic_bezier_tuples_from_points <manim.mobject.types.vectorized_mobject.VMobject.gen_cubic_bezier_tuples_from_points>`"

msgid "If the :class:`VMobject` has no points."
msgstr "If the :class:`VMobject` has no points."

msgid "Add Quadratic bezier curve to the path."
msgstr "Add Quadratic bezier curve to the path."

msgid "Returns the subcurve of the VMobject between the interval [a, b]."
msgstr "Returns the subcurve of the VMobject between the interval [a, b]."

msgid "Rotates the direction of the applied sheen."
msgstr "Rotates the direction of the applied sheen."

msgid ":obj:`get_point_mobject <manim.mobject.types.vectorized_mobject.VMobject.get_point_mobject>`"
msgstr ":obj:`get_point_mobject <manim.mobject.types.vectorized_mobject.VMobject.get_point_mobject>`"

msgid ":obj:`get_subpaths_from_points <manim.mobject.types.vectorized_mobject.VMobject.get_subpaths_from_points>`"
msgstr ":obj:`get_subpaths_from_points <manim.mobject.types.vectorized_mobject.VMobject.get_subpaths_from_points>`"

msgid "Returns subpaths formed by the curves of the VMobject."
msgstr "Returns subpaths formed by the curves of the VMobject."

msgid "Changes the anchor mode of the bezier curves."
msgstr "Changes the anchor mode of the bezier curves."

msgid "Add a straight line from the last point of VMobject to the given point."
msgstr "Add a straight line from the last point of VMobject to the given point."

msgid ":obj:`set_sheen <manim.mobject.types.vectorized_mobject.VMobject.set_sheen>`"
msgstr ":obj:`set_sheen <manim.mobject.types.vectorized_mobject.VMobject.set_sheen>`"

msgid "**length** (:class:`float`) -- The length of the nth curve."
msgstr "**length** (:class:`float`) -- The length of the nth curve."

msgid ":obj:`rotate_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.rotate_sheen_direction>`"
msgstr ":obj:`rotate_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.rotate_sheen_direction>`"

msgid ":obj:`get_style <manim.mobject.types.vectorized_mobject.VMobject.get_style>`"
msgstr ":obj:`get_style <manim.mobject.types.vectorized_mobject.VMobject.get_style>`"

msgid "Returns the expression of the nth curve."
msgstr "Returns the expression of the nth curve."

msgid ":obj:`pointwise_become_partial <manim.mobject.types.vectorized_mobject.VMobject.pointwise_become_partial>`"
msgstr ":obj:`pointwise_become_partial <manim.mobject.types.vectorized_mobject.VMobject.pointwise_become_partial>`"

msgid ":obj:`has_new_path_started <manim.mobject.types.vectorized_mobject.VMobject.has_new_path_started>`"
msgstr ":obj:`has_new_path_started <manim.mobject.types.vectorized_mobject.VMobject.has_new_path_started>`"

msgid ":obj:`align_points <manim.mobject.types.vectorized_mobject.VMobject.align_points>`"
msgstr ":obj:`align_points <manim.mobject.types.vectorized_mobject.VMobject.align_points>`"

msgid "Returns the (approximate) length of the nth curve."
msgstr "Returns the (approximate) length of the nth curve."

msgid ":obj:`reverse_direction <manim.mobject.types.vectorized_mobject.VMobject.reverse_direction>`"
msgstr ":obj:`reverse_direction <manim.mobject.types.vectorized_mobject.VMobject.reverse_direction>`"

msgid "We define a subpath between two curve if one of their extreminities are coincidents."
msgstr "We define a subpath between two curve if one of their extreminities are coincidents."

msgid ":obj:`get_subpaths <manim.mobject.types.vectorized_mobject.VMobject.get_subpaths>`"
msgstr ":obj:`get_subpaths <manim.mobject.types.vectorized_mobject.VMobject.get_subpaths>`"

msgid "Sets the direction of the applied sheen."
msgstr "Sets the direction of the applied sheen."

msgid ":meth:`~.VMobject.set_style`"
msgstr ":meth:`~.VMobject.set_style`"

msgid ":obj:`get_end_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_end_anchors>`"
msgstr ":obj:`get_end_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_end_anchors>`"

msgid "self.points is a list of the anchors and handles of the bezier curves of the mobject (ie [anchor1, handle1, handle2, anchor2, anchor3 ..]) This algorithm basically retrieve them by taking an element every n, where n is the number of control points of the bezier curve."
msgstr "self.points is a list of the anchors and handles of the bezier curves of the mobject (ie [anchor1, handle1, handle2, anchor2, anchor3 ..]) This algorithm basically retrieve them by taking an element every n, where n is the number of control points of the bezier curve."

msgid ":obj:`get_curve_functions_with_lengths <manim.mobject.types.vectorized_mobject.VMobject.get_curve_functions_with_lengths>`"
msgstr ":obj:`get_curve_functions_with_lengths <manim.mobject.types.vectorized_mobject.VMobject.get_curve_functions_with_lengths>`"

msgid ":obj:`get_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.get_sheen_direction>`"
msgstr ":obj:`get_sheen_direction <manim.mobject.types.vectorized_mobject.VMobject.get_sheen_direction>`"

msgid "Number of desired curves."
msgstr "Number of desired curves."

msgid ":obj:`apply_function <manim.mobject.types.vectorized_mobject.VMobject.apply_function>`"
msgstr ":obj:`apply_function <manim.mobject.types.vectorized_mobject.VMobject.apply_function>`"

msgid "Returns the number of curves of the vmobject."
msgstr "Returns the number of curves of the vmobject."

msgid "Returns the anchors of the curves forming the VMobject."
msgstr "Returns the anchors of the curves forming the VMobject."

msgid "Return the approximated length of the whole curve."
msgstr "Return the approximated length of the whole curve."

msgid "There can be only two modes, \"jagged\", and \"smooth\"."
msgstr "There can be only two modes, \"jagged\", and \"smooth\"."

msgid ":obj:`add_cubic_bezier_curve <manim.mobject.types.vectorized_mobject.VMobject.add_cubic_bezier_curve>`"
msgstr ":obj:`add_cubic_bezier_curve <manim.mobject.types.vectorized_mobject.VMobject.add_cubic_bezier_curve>`"

msgid "Set the fill color and fill opacity of a :class:`VMobject`."
msgstr "Set the fill color and fill opacity of a :class:`VMobject`."

msgid "The proportion along the the path of the :class:`VMobject`."
msgstr "The proportion along the the path of the :class:`VMobject`."

msgid ":obj:`set_opacity <manim.mobject.types.vectorized_mobject.VMobject.set_opacity>`"
msgstr ":obj:`set_opacity <manim.mobject.types.vectorized_mobject.VMobject.set_opacity>`"

msgid "Returns the proportion along the path of the :class:`VMobject` a particular given point is at."
msgstr "Returns the proportion along the path of the :class:`VMobject` a particular given point is at."

msgid "The factor used for scaling."
msgstr "The factor used for scaling."

msgid "Returns self."
msgstr "Returns self."

msgid "First arg can be either a color, or a tuple/list of colors. Likewise, opacity can either be a float, or a tuple of floats. If self.sheen_factor is not zero, and only one color was passed in, a second slightly light color will automatically be added for the gradient"
msgstr "First arg can be either a color, or a tuple/list of colors. Likewise, opacity can either be a float, or a tuple of floats. If self.sheen_factor is not zero, and only one color was passed in, a second slightly light color will automatically be added for the gradient"

msgid ":obj:`get_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_anchors>`"
msgstr ":obj:`get_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_anchors>`"

msgid ":obj:`get_fill_opacity <manim.mobject.types.vectorized_mobject.VMobject.get_fill_opacity>`"
msgstr ":obj:`get_fill_opacity <manim.mobject.types.vectorized_mobject.VMobject.get_fill_opacity>`"

msgid ":obj:`add_points_as_corners <manim.mobject.types.vectorized_mobject.VMobject.add_points_as_corners>`"
msgstr ":obj:`add_points_as_corners <manim.mobject.types.vectorized_mobject.VMobject.add_points_as_corners>`"

msgid ":obj:`is_closed <manim.mobject.types.vectorized_mobject.VMobject.is_closed>`"
msgstr ":obj:`is_closed <manim.mobject.types.vectorized_mobject.VMobject.is_closed>`"

msgid ":obj:`point_from_proportion <manim.mobject.types.vectorized_mobject.VMobject.point_from_proportion>`"
msgstr ":obj:`point_from_proportion <manim.mobject.types.vectorized_mobject.VMobject.point_from_proportion>`"

msgid ":obj:`consider_points_equals <manim.mobject.types.vectorized_mobject.VMobject.consider_points_equals>`"
msgstr ":obj:`consider_points_equals <manim.mobject.types.vectorized_mobject.VMobject.consider_points_equals>`"

msgid ":obj:`get_curve_functions <manim.mobject.types.vectorized_mobject.VMobject.get_curve_functions>`"
msgstr ":obj:`get_curve_functions <manim.mobject.types.vectorized_mobject.VMobject.get_curve_functions>`"

msgid "If ``True``, the fill color of all submobjects is also set."
msgstr "If ``True``, the fill color of all submobjects is also set."

msgid "second handle"
msgstr "second handle"

msgid "Gets the functions for the curves of the mobject."
msgstr "Gets the functions for the curves of the mobject."

msgid ":obj:`set_points_smoothly <manim.mobject.types.vectorized_mobject.VMobject.set_points_smoothly>`"
msgstr ":obj:`set_points_smoothly <manim.mobject.types.vectorized_mobject.VMobject.set_points_smoothly>`"

msgid "anchor"
msgstr "anchor"

msgid ":obj:`set_points <manim.mobject.types.vectorized_mobject.VMobject.set_points>`"
msgstr ":obj:`set_points <manim.mobject.types.vectorized_mobject.VMobject.set_points>`"

msgid "For chaining."
msgstr "For chaining."

msgid ":obj:`get_nth_curve_length <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_length>`"
msgstr ":obj:`get_nth_curve_length <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_length>`"

msgid "This uses the algorithm from np.isclose(), but expanded here for the 2D point case. NumPy is overkill for such a small question. :param p0: first point :type p0: np.ndarray :param p1: second point :type p1: np.ndarray"
msgstr "This uses the algorithm from np.isclose(), but expanded here for the 2D point case. NumPy is overkill for such a small question. :param p0: first point :type p0: np.ndarray :param p1: second point :type p1: np.ndarray"

msgid ":obj:`add_smooth_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_smooth_curve_to>`"
msgstr ":obj:`add_smooth_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_smooth_curve_to>`"

msgid "Fill opacity of the :class:`VMobject`."
msgstr "Fill opacity of the :class:`VMobject`."

msgid ":obj:`set_style <manim.mobject.types.vectorized_mobject.VMobject.set_style>`"
msgstr ":obj:`set_style <manim.mobject.types.vectorized_mobject.VMobject.set_style>`"

msgid ":obj:`add_subpath <manim.mobject.types.vectorized_mobject.VMobject.add_subpath>`"
msgstr ":obj:`add_subpath <manim.mobject.types.vectorized_mobject.VMobject.add_subpath>`"

msgid ":obj:`get_background_image <manim.mobject.types.vectorized_mobject.VMobject.get_background_image>`"
msgstr ":obj:`get_background_image <manim.mobject.types.vectorized_mobject.VMobject.get_background_image>`"

msgid ":obj:`interpolate_color <manim.mobject.types.vectorized_mobject.VMobject.interpolate_color>`"
msgstr ":obj:`interpolate_color <manim.mobject.types.vectorized_mobject.VMobject.interpolate_color>`"

msgid ":obj:`insert_n_curves <manim.mobject.types.vectorized_mobject.VMobject.insert_n_curves>`"
msgstr ":obj:`insert_n_curves <manim.mobject.types.vectorized_mobject.VMobject.insert_n_curves>`"

msgid "expression of the nth bezier curve."
msgstr "expression of the nth bezier curve."

msgid "Makes sure that points are either directed clockwise or counterclockwise."
msgstr "Makes sure that points are either directed clockwise or counterclockwise."

msgid ":obj:`set_color <manim.mobject.types.vectorized_mobject.VMobject.set_color>`"
msgstr ":obj:`set_color <manim.mobject.types.vectorized_mobject.VMobject.set_color>`"

msgid ":obj:`start_new_path <manim.mobject.types.vectorized_mobject.VMobject.start_new_path>`"
msgstr ":obj:`start_new_path <manim.mobject.types.vectorized_mobject.VMobject.start_new_path>`"

msgid "Points from which control points will be extracted."
msgstr "Points from which control points will be extracted."

msgid ":obj:`append_vectorized_mobject <manim.mobject.types.vectorized_mobject.VMobject.append_vectorized_mobject>`"
msgstr ":obj:`append_vectorized_mobject <manim.mobject.types.vectorized_mobject.VMobject.append_vectorized_mobject>`"

msgid "Creates a smooth curve from given points and add it to the VMobject. If two points are passed in, the first is interpreted as a handle, the second as an anchor."
msgstr "Creates a smooth curve from given points and add it to the VMobject. If two points are passed in, the first is interpreted as a handle, the second as an anchor."

msgid ":obj:`get_stroke_opacity <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_opacity>`"
msgstr ":obj:`get_stroke_opacity <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_opacity>`"

msgid ":obj:`get_sheen_factor <manim.mobject.types.vectorized_mobject.VMobject.get_sheen_factor>`"
msgstr ":obj:`get_sheen_factor <manim.mobject.types.vectorized_mobject.VMobject.get_sheen_factor>`"

msgid "NOTE : the first anchor is not a parameter as by default the end of the last sub-path!"
msgstr "NOTE : the first anchor is not a parameter as by default the end of the last sub-path!"

msgid "Angle by which the direction of sheen is rotated."
msgstr "Angle by which the direction of sheen is rotated."

msgid "points defininf the nth bezier curve (anchors, handles)"
msgstr "points defininf the nth bezier curve (anchors, handles)"

msgid ":obj:`get_fill_opacities <manim.mobject.types.vectorized_mobject.VMobject.get_fill_opacities>`"
msgstr ":obj:`get_fill_opacities <manim.mobject.types.vectorized_mobject.VMobject.get_fill_opacities>`"

msgid ":obj:`scale_handle_to_anchor_distances <manim.mobject.types.vectorized_mobject.VMobject.scale_handle_to_anchor_distances>`"
msgstr ":obj:`scale_handle_to_anchor_distances <manim.mobject.types.vectorized_mobject.VMobject.scale_handle_to_anchor_distances>`"

msgid ":obj:`make_smooth <manim.mobject.types.vectorized_mobject.VMobject.make_smooth>`"
msgstr ":obj:`make_smooth <manim.mobject.types.vectorized_mobject.VMobject.make_smooth>`"

msgid ":obj:`get_stroke_colors <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_colors>`"
msgstr ":obj:`get_stroke_colors <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_colors>`"

msgid "Returns the subcurve of the VMobject between the interval [a, b]. The curve is a VMobject itself."
msgstr "Returns the subcurve of the VMobject between the interval [a, b]. The curve is a VMobject itself."

msgid ":obj:`change_anchor_mode <manim.mobject.types.vectorized_mobject.VMobject.change_anchor_mode>`"
msgstr ":obj:`change_anchor_mode <manim.mobject.types.vectorized_mobject.VMobject.change_anchor_mode>`"

msgid "subpaths."
msgstr "subpaths."

msgid ":obj:`add_line_to <manim.mobject.types.vectorized_mobject.VMobject.add_line_to>`"
msgstr ":obj:`add_line_to <manim.mobject.types.vectorized_mobject.VMobject.add_line_to>`"

msgid "Returns the bezier tuples from an array of points."
msgstr "Returns the bezier tuples from an array of points."

msgid ":obj:`proportion_from_point <manim.mobject.types.vectorized_mobject.VMobject.proportion_from_point>`"
msgstr ":obj:`proportion_from_point <manim.mobject.types.vectorized_mobject.VMobject.proportion_from_point>`"

msgid "Iterable of the anchors and handles."
msgstr "Iterable of the anchors and handles."

msgid "The functions for the curves."
msgstr "The functions for the curves."

msgid "Gets the functions and lengths of the curves for the mobject."
msgstr "Gets the functions and lengths of the curves for the mobject."

msgid ":obj:`update_rgbas_array <manim.mobject.types.vectorized_mobject.VMobject.update_rgbas_array>`"
msgstr ":obj:`update_rgbas_array <manim.mobject.types.vectorized_mobject.VMobject.update_rgbas_array>`"

msgid "Fill color of the :class:`VMobject`."
msgstr "Fill color of the :class:`VMobject`."

msgid "The point on the :class:`VMobject`."
msgstr "The point on the :class:`VMobject`."

msgid "end of the straight line."
msgstr "end of the straight line."

msgid "VMobject"
msgstr "VMobject"

msgid "self. For chaining purposes."
msgstr "self. For chaining purposes."

msgid "Array of points that will be set as corners."
msgstr "Array of points that will be set as corners."

msgid ":class:`VMobject`"
msgstr ":class:`VMobject`"

msgid ":obj:`get_color <manim.mobject.types.vectorized_mobject.VMobject.get_color>`"
msgstr ":obj:`get_color <manim.mobject.types.vectorized_mobject.VMobject.get_color>`"

msgid ":obj:`get_stroke_color <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_color>`"
msgstr ":obj:`get_stroke_color <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_color>`"

msgid ":obj:`match_style <manim.mobject.types.vectorized_mobject.VMobject.match_style>`"
msgstr ":obj:`match_style <manim.mobject.types.vectorized_mobject.VMobject.match_style>`"

msgid ":obj:`set_stroke <manim.mobject.types.vectorized_mobject.VMobject.set_stroke>`"
msgstr ":obj:`set_stroke <manim.mobject.types.vectorized_mobject.VMobject.set_stroke>`"

msgid "The extent of lustre/gradient to apply. If negative, the gradient starts from black, if positive the gradient starts from white and changes to the current color."
msgstr "The extent of lustre/gradient to apply. If negative, the gradient starts from black, if positive the gradient starts from white and changes to the current color."

msgid "The Cartesian coordinates of the point which may or may not lie on the :class:`VMobject`"
msgstr "The Cartesian coordinates of the point which may or may not lie on the :class:`VMobject`"

msgid "First arg can be either a color, or a tuple/list of colors."
msgstr "First arg can be either a color, or a tuple/list of colors."

msgid ":obj:`get_fill_color <manim.mobject.types.vectorized_mobject.VMobject.get_fill_color>`"
msgstr ":obj:`get_fill_color <manim.mobject.types.vectorized_mobject.VMobject.get_fill_color>`"

msgid "first handle"
msgstr "first handle"

msgid ":obj:`get_stroke_rgbas <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_rgbas>`"
msgstr ":obj:`get_stroke_rgbas <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_rgbas>`"

msgid ":obj:`get_last_point <manim.mobject.types.vectorized_mobject.VMobject.get_last_point>`"
msgstr ":obj:`get_last_point <manim.mobject.types.vectorized_mobject.VMobject.get_last_point>`"

msgid ":obj:`color_using_background_image <manim.mobject.types.vectorized_mobject.VMobject.color_using_background_image>`"
msgstr ":obj:`color_using_background_image <manim.mobject.types.vectorized_mobject.VMobject.color_using_background_image>`"

msgid ":obj:`add_quadratic_bezier_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_quadratic_bezier_curve_to>`"
msgstr ":obj:`add_quadratic_bezier_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_quadratic_bezier_curve_to>`"

msgid "The number of points to sample to find the length."
msgstr "The number of points to sample to find the length."

msgid "Points (anchor and handle, or just anchor) to add a smooth curve from"
msgstr "Points (anchor and handle, or just anchor) to add a smooth curve from"

msgid "Rotates the :class:`~.Mobject` about a certain point."
msgstr "Rotates the :class:`~.Mobject` about a certain point."

msgid ":obj:`get_nth_curve_function_with_length <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_function_with_length>`"
msgstr ":obj:`get_nth_curve_function_with_length <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_function_with_length>`"

msgid ":obj:`get_subcurve <manim.mobject.types.vectorized_mobject.VMobject.get_subcurve>`"
msgstr ":obj:`get_subcurve <manim.mobject.types.vectorized_mobject.VMobject.get_subcurve>`"

msgid ":obj:`get_start_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_start_anchors>`"
msgstr ":obj:`get_start_anchors <manim.mobject.types.vectorized_mobject.VMobject.get_start_anchors>`"

msgid ":obj:`get_cubic_bezier_tuples_from_points <manim.mobject.types.vectorized_mobject.VMobject.get_cubic_bezier_tuples_from_points>`"
msgstr ":obj:`get_cubic_bezier_tuples_from_points <manim.mobject.types.vectorized_mobject.VMobject.get_cubic_bezier_tuples_from_points>`"

msgid ":obj:`get_group_class <manim.mobject.types.vectorized_mobject.VMobject.get_group_class>`"
msgstr ":obj:`get_group_class <manim.mobject.types.vectorized_mobject.VMobject.get_group_class>`"

msgid ":obj:`init_colors <manim.mobject.types.vectorized_mobject.VMobject.init_colors>`"
msgstr ":obj:`init_colors <manim.mobject.types.vectorized_mobject.VMobject.init_colors>`"

msgid ":obj:`set_points_as_corners <manim.mobject.types.vectorized_mobject.VMobject.set_points_as_corners>`"
msgstr ":obj:`set_points_as_corners <manim.mobject.types.vectorized_mobject.VMobject.set_points_as_corners>`"

msgid "Given an array of k points defining a bezier curves (anchors and handles), returns points defining exactly k + n bezier curves."
msgstr "Given an array of k points defining a bezier curves (anchors and handles), returns points defining exactly k + n bezier curves."

msgid "Changes the anchor mode of the bezier curves. This will modify the handles."
msgstr "Changes the anchor mode of the bezier curves. This will modify the handles."

msgid "If the distance between a given handle point H and its associated anchor point A is d, then it changes H to be a distances factor*d away from A, but so that the line from A to H doesn't change. This is mostly useful in the context of applying a (differentiable) function, to preserve tangency properties.  One would pull all the handles closer to their anchors, apply the function then push them out again."
msgstr "If the distance between a given handle point H and its associated anchor point A is d, then it changes H to be a distances factor*d away from A, but so that the line from A to H doesn't change. This is mostly useful in the context of applying a (differentiable) function, to preserve tangency properties.  One would pull all the handles closer to their anchors, apply the function then push them out again."

msgid "The proportion along the path of the :class:`VMobject`."
msgstr "The proportion along the path of the :class:`VMobject`."

msgid "The length of the :class:`VMobject`."
msgstr "The length of the :class:`VMobject`."

msgid "Returns anchors1, handles1, handles2, anchors2, where (anchors1[i], handles1[i], handles2[i], anchors2[i]) will be four points defining a cubic bezier curve for any i in range(0, len(anchors1))"
msgstr "Returns anchors1, handles1, handles2, anchors2, where (anchors1[i], handles1[i], handles2[i], anchors2[i]) will be four points defining a cubic bezier curve for any i in range(0, len(anchors1))"

msgid ":obj:`get_fill_rgbas <manim.mobject.types.vectorized_mobject.VMobject.get_fill_rgbas>`"
msgstr ":obj:`get_fill_rgbas <manim.mobject.types.vectorized_mobject.VMobject.get_fill_rgbas>`"

msgid "Add cubic bezier curve to the path."
msgstr "Add cubic bezier curve to the path."

msgid ":obj:`get_gradient_start_and_end_points <manim.mobject.types.vectorized_mobject.VMobject.get_gradient_start_and_end_points>`"
msgstr ":obj:`get_gradient_start_and_end_points <manim.mobject.types.vectorized_mobject.VMobject.get_gradient_start_and_end_points>`"

msgid "The index of the desired curve."
msgstr "The index of the desired curve."

msgid ":obj:`get_fill_colors <manim.mobject.types.vectorized_mobject.VMobject.get_fill_colors>`"
msgstr ":obj:`get_fill_colors <manim.mobject.types.vectorized_mobject.VMobject.get_fill_colors>`"

msgid ":obj:`set_background_stroke <manim.mobject.types.vectorized_mobject.VMobject.set_background_stroke>`"
msgstr ":obj:`set_background_stroke <manim.mobject.types.vectorized_mobject.VMobject.set_background_stroke>`"

msgid "The subcurve between of [a, b]"
msgstr "The subcurve between of [a, b]"

msgid "Axis of rotation."
msgstr "Axis of rotation."

msgid "The functions and lengths of the curves."
msgstr "The functions and lengths of the curves."

msgid "The anchors."
msgstr "The anchors."

msgid "**curve** (*typing.Callable[[float], np.ndarray]*) -- The function for the nth curve."
msgstr "**curve** (*typing.Callable[[float], np.ndarray]*) -- The function for the nth curve."

msgid ":meth:`~.VMobject.set_sheen`, :meth:`~.VMobject.rotate_sheen_direction`"
msgstr ":meth:`~.VMobject.set_sheen`, :meth:`~.VMobject.rotate_sheen_direction`"

msgid "Reverts the point direction by inverting the point order."
msgstr "Reverts the point direction by inverting the point order."

msgid "If ``point`` does not lie on the curve."
msgstr "If ``point`` does not lie on the curve."

msgid "Starting points."
msgstr "Starting points."

msgid "* **curve** (*typing.Callable[[float], np.ndarray]*) -- The function for the nth curve. * **length** (:class:`float`) -- The length of the nth curve."
msgstr "* **curve** (*typing.Callable[[float], np.ndarray]*) -- The function for the nth curve. * **length** (:class:`float`) -- The length of the nth curve."

msgid "If there are multiple opacities, this returns the first"
msgstr "If there are multiple opacities, this returns the first"

msgid ":obj:`get_num_curves <manim.mobject.types.vectorized_mobject.VMobject.get_num_curves>`"
msgstr ":obj:`get_num_curves <manim.mobject.types.vectorized_mobject.VMobject.get_num_curves>`"

msgid "Starting anchors"
msgstr "Starting anchors"

msgid "The upper bound."
msgstr "The upper bound."

msgid ":class:`float`"
msgstr ":class:`float`"

msgid "If the distance between a given handle point H and its associated anchor point A is d, then it changes H to be a distances factor*d away from A, but so that the line from A to H doesn't change."
msgstr "If the distance between a given handle point H and its associated anchor point A is d, then it changes H to be a distances factor*d away from A, but so that the line from A to H doesn't change."

msgid ":obj:`align_rgbas <manim.mobject.types.vectorized_mobject.VMobject.align_rgbas>`"
msgstr ":obj:`align_rgbas <manim.mobject.types.vectorized_mobject.VMobject.align_rgbas>`"

msgid ":class:`numpy.ndarray`"
msgstr ":class:`numpy.ndarray`"

msgid ":obj:`get_stroke_width <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_width>`"
msgstr ":obj:`get_stroke_width <manim.mobject.types.vectorized_mobject.VMobject.get_stroke_width>`"

msgid ":obj:`make_jagged <manim.mobject.types.vectorized_mobject.VMobject.make_jagged>`"
msgstr ":obj:`make_jagged <manim.mobject.types.vectorized_mobject.VMobject.make_jagged>`"

msgid "For chaining purposes."
msgstr "For chaining purposes."

msgid "Returns the points defining the nth curve of the vmobject."
msgstr "Returns the points defining the nth curve of the vmobject."

msgid ":obj:`match_background_image <manim.mobject.types.vectorized_mobject.VMobject.match_background_image>`"
msgstr ":obj:`match_background_image <manim.mobject.types.vectorized_mobject.VMobject.match_background_image>`"

msgid "Inserts n curves to the bezier curves of the vmobject."
msgstr "Inserts n curves to the bezier curves of the vmobject."

msgid "The method VMobject.get_points has been deprecated since 0.11.0 and may be removed in a later version. Use :meth:`~.self.points` instead."
msgstr "The method VMobject.get_points has been deprecated since 0.11.0 and may be removed in a later version. Use :meth:`~.self.points` instead."

msgid "number of curves. of the vmobject."
msgstr "number of curves. of the vmobject."

msgid "Returns the start anchors of the bezier curves."
msgstr "Returns the start anchors of the bezier curves."

msgid "anchors1[i], handles1[i], handles2[i] and anchors2[i] define the i-th bezier curve of the vmobject. There are four hardcoded parameters and this is a problem as it makes the number of points per cubic curve unchangeable from 4 (two anchors and two handles)."
msgstr "anchors1[i], handles1[i], handles2[i] and anchors2[i] define the i-th bezier curve of the vmobject. There are four hardcoded parameters and this is a problem as it makes the number of points per cubic curve unchangeable from 4 (two anchors and two handles)."

msgid ":obj:`set_shade_in_3d <manim.mobject.types.vectorized_mobject.VMobject.set_shade_in_3d>`"
msgstr ":obj:`set_shade_in_3d <manim.mobject.types.vectorized_mobject.VMobject.set_shade_in_3d>`"

msgid "**length** -- The length of the nth curve."
msgstr "**length** -- The length of the nth curve."

msgid "for chaining."
msgstr "for chaining."

msgid "Gets the point at a proportion along the path of the :class:`VMobject`."
msgstr "Gets the point at a proportion along the path of the :class:`VMobject`."

msgid ":obj:`get_direction <manim.mobject.types.vectorized_mobject.VMobject.get_direction>`"
msgstr ":obj:`get_direction <manim.mobject.types.vectorized_mobject.VMobject.get_direction>`"

msgid "The lower bound."
msgstr "The lower bound."

msgid "Number of curves to insert."
msgstr "Number of curves to insert."

msgid ":obj:`get_anchors_and_handles <manim.mobject.types.vectorized_mobject.VMobject.get_anchors_and_handles>`"
msgstr ":obj:`get_anchors_and_handles <manim.mobject.types.vectorized_mobject.VMobject.get_anchors_and_handles>`"

msgid ":obj:`add_cubic_bezier_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_cubic_bezier_curve_to>`"
msgstr ":obj:`add_cubic_bezier_curve_to <manim.mobject.types.vectorized_mobject.VMobject.add_cubic_bezier_curve_to>`"

msgid "To achieve that, this algorithm sets handles aligned with the anchors such that the resultant bezier curve will be the segment between the two anchors."
msgstr "To achieve that, this algorithm sets handles aligned with the anchors such that the resultant bezier curve will be the segment between the two anchors."

msgid ":obj:`get_nth_curve_function <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_function>`"
msgstr ":obj:`get_nth_curve_function <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_function>`"

msgid ":obj:`get_cubic_bezier_tuples <manim.mobject.types.vectorized_mobject.VMobject.get_cubic_bezier_tuples>`"
msgstr ":obj:`get_cubic_bezier_tuples <manim.mobject.types.vectorized_mobject.VMobject.get_cubic_bezier_tuples>`"

msgid "whether two points considered close."
msgstr "whether two points considered close."

msgid ":obj:`get_nth_curve_points <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_points>`"
msgstr ":obj:`get_nth_curve_points <manim.mobject.types.vectorized_mobject.VMobject.get_nth_curve_points>`"

msgid ":obj:`get_arc_length <manim.mobject.types.vectorized_mobject.VMobject.get_arc_length>`"
msgstr ":obj:`get_arc_length <manim.mobject.types.vectorized_mobject.VMobject.get_arc_length>`"
