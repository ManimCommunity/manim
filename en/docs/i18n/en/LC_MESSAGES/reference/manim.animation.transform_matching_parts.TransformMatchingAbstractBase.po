msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: lokalise.com\n"
"Project-Id-Version: Manim\n"
"PO-Revision-Date: 2021-09-29 06:36\n"
"Last-Translator: lokalise.com\n"
"Language-Team: lokalise.com\n\n"
"Language: en\n"

msgid "Subclasses have to implement the two static methods :meth:`~.TransformMatchingAbstractBase.get_mobject_parts` and :meth:`~.TransformMatchingAbstractBase.get_mobject_key`."
msgstr "Subclasses have to implement the two static methods :meth:`~.TransformMatchingAbstractBase.get_mobject_parts` and :meth:`~.TransformMatchingAbstractBase.get_mobject_key`."

msgid "Controls whether submobjects without a matching key are transformed into each other by using :class:`~.Transform`. Default: ``False``."
msgstr "Controls whether submobjects without a matching key are transformed into each other by using :class:`~.Transform`. Default: ``False``."

msgid "Optional. A dictionary mapping keys belonging to some of the starting mobject's submobjects (i.e., the return values of the ``get_mobject_key`` method) to some keys belonging to the target mobject's submobjects that should be transformed although the keys don't match."
msgstr "Optional. A dictionary mapping keys belonging to some of the starting mobject's submobjects (i.e., the return values of the ``get_mobject_key`` method) to some keys belonging to the target mobject's submobjects that should be transformed although the keys don't match."

msgid ":obj:`clean_up_from_scene <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.clean_up_from_scene>`"
msgstr ":obj:`clean_up_from_scene <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.clean_up_from_scene>`"

msgid ":obj:`get_mobject_parts <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_mobject_parts>`"
msgstr ":obj:`get_mobject_parts <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_mobject_parts>`"

msgid "If neither ``transform_mismatches`` nor ``fade_transform_mismatches`` are set to ``True``, submobjects without matching keys in the starting mobject are faded out in the direction of the unmatched submobjects in the target mobject, and unmatched submobjects in the target mobject are faded in from the direction of the unmatched submobjects in the start mobject."
msgstr "If neither ``transform_mismatches`` nor ``fade_transform_mismatches`` are set to ``True``, submobjects without matching keys in the starting mobject are faded out in the direction of the unmatched submobjects in the target mobject, and unmatched submobjects in the target mobject are faded in from the direction of the unmatched submobjects in the start mobject."

msgid "All further keyword arguments are passed to the submobject transformations."
msgstr "All further keyword arguments are passed to the submobject transformations."

msgid "Controls whether submobjects without a matching key are transformed into each other by using :class:`~.FadeTransform`. Default: ``False``."
msgstr "Controls whether submobjects without a matching key are transformed into each other by using :class:`~.FadeTransform`. Default: ``False``."

msgid "Basically, this transformation first maps all submobjects returned by the ``get_mobject_parts`` method to certain keys by applying the ``get_mobject_key`` method. Then, submobjects with matching keys are transformed into each other."
msgstr "Basically, this transformation first maps all submobjects returned by the ``get_mobject_parts`` method to certain keys by applying the ``get_mobject_key`` method. Then, submobjects with matching keys are transformed into each other."

msgid "TransformMatchingAbstractBase"
msgstr "TransformMatchingAbstractBase"

msgid ":obj:`get_mobject_key <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_mobject_key>`"
msgstr ":obj:`get_mobject_key <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_mobject_key>`"

msgid ":obj:`get_shape_map <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_shape_map>`"
msgstr ":obj:`get_shape_map <manim.animation.transform_matching_parts.TransformMatchingAbstractBase.get_shape_map>`"
