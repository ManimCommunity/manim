msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: lokalise.com\n"
"Project-Id-Version: Manim\n"
"PO-Revision-Date: 2021-09-29 06:36\n"
"Last-Translator: lokalise.com\n"
"Language-Team: lokalise.com\n\n"
"Language: en\n"

msgid ":obj:`get_array_attrs <manim.mobject.types.point_cloud_mobject.PMobject.get_array_attrs>`"
msgstr ":obj:`get_array_attrs <manim.mobject.types.point_cloud_mobject.PMobject.get_array_attrs>`"

msgid ":obj:`set_color <manim.mobject.types.point_cloud_mobject.PMobject.set_color>`"
msgstr ":obj:`set_color <manim.mobject.types.point_cloud_mobject.PMobject.set_color>`"

msgid ":obj:`add_points <manim.mobject.types.point_cloud_mobject.PMobject.add_points>`"
msgstr ":obj:`add_points <manim.mobject.types.point_cloud_mobject.PMobject.add_points>`"

msgid ":obj:`get_stroke_width <manim.mobject.types.point_cloud_mobject.PMobject.get_stroke_width>`"
msgstr ":obj:`get_stroke_width <manim.mobject.types.point_cloud_mobject.PMobject.get_stroke_width>`"

msgid "Function is any map from R^3 to R"
msgstr "Function is any map from R^3 to R"

msgid ":obj:`match_colors <manim.mobject.types.point_cloud_mobject.PMobject.match_colors>`"
msgstr ":obj:`match_colors <manim.mobject.types.point_cloud_mobject.PMobject.match_colors>`"

msgid ":obj:`align_points_with_larger <manim.mobject.types.point_cloud_mobject.PMobject.align_points_with_larger>`"
msgstr ":obj:`align_points_with_larger <manim.mobject.types.point_cloud_mobject.PMobject.align_points_with_larger>`"

msgid ":obj:`ingest_submobjects <manim.mobject.types.point_cloud_mobject.PMobject.ingest_submobjects>`"
msgstr ":obj:`ingest_submobjects <manim.mobject.types.point_cloud_mobject.PMobject.ingest_submobjects>`"

msgid ":obj:`thin_out <manim.mobject.types.point_cloud_mobject.PMobject.thin_out>`"
msgstr ":obj:`thin_out <manim.mobject.types.point_cloud_mobject.PMobject.thin_out>`"

msgid "The simplest :class:`~.Mobject` to be transformed to or from self."
msgstr "The simplest :class:`~.Mobject` to be transformed to or from self."

msgid ":obj:`point_from_proportion <manim.mobject.types.point_cloud_mobject.PMobject.point_from_proportion>`"
msgstr ":obj:`point_from_proportion <manim.mobject.types.point_cloud_mobject.PMobject.point_from_proportion>`"

msgid "A disc made of a cloud of Dots"
msgstr "A disc made of a cloud of Dots"

msgid ":obj:`set_stroke_width <manim.mobject.types.point_cloud_mobject.PMobject.set_stroke_width>`"
msgstr ":obj:`set_stroke_width <manim.mobject.types.point_cloud_mobject.PMobject.set_stroke_width>`"

msgid ":obj:`set_color_by_gradient <manim.mobject.types.point_cloud_mobject.PMobject.set_color_by_gradient>`"
msgstr ":obj:`set_color_by_gradient <manim.mobject.types.point_cloud_mobject.PMobject.set_color_by_gradient>`"

msgid "Removes all but every nth point for n = factor"
msgstr "Removes all but every nth point for n = factor"

msgid "Bases: :class:`manim.mobject.mobject.Mobject`"
msgstr "Bases: :class:`manim.mobject.mobject.Mobject`"

msgid ":obj:`interpolate_color <manim.mobject.types.point_cloud_mobject.PMobject.interpolate_color>`"
msgstr ":obj:`interpolate_color <manim.mobject.types.point_cloud_mobject.PMobject.interpolate_color>`"

msgid "Points must be a Nx3 numpy array, as must rgbas if it is not None"
msgstr "Points must be a Nx3 numpy array, as must rgbas if it is not None"

msgid ":obj:`sort_points <manim.mobject.types.point_cloud_mobject.PMobject.sort_points>`"
msgstr ":obj:`sort_points <manim.mobject.types.point_cloud_mobject.PMobject.sort_points>`"

msgid "Sets :attr:`points` to be an empty array."
msgstr "Sets :attr:`points` to be an empty array."

msgid "The simplest :class:`~.Mobject` to be transformed to or from self. Should by a point of the appropriate type"
msgstr "The simplest :class:`~.Mobject` to be transformed to or from self. Should by a point of the appropriate type"

msgid ":obj:`pointwise_become_partial <manim.mobject.types.point_cloud_mobject.PMobject.pointwise_become_partial>`"
msgstr ":obj:`pointwise_become_partial <manim.mobject.types.point_cloud_mobject.PMobject.pointwise_become_partial>`"

msgid "Condition is function which takes in one arguments, (x, y, z). Here it just recurses to submobjects, but in subclasses this should be further implemented based on the the inner workings of color"
msgstr "Condition is function which takes in one arguments, (x, y, z). Here it just recurses to submobjects, but in subclasses this should be further implemented based on the the inner workings of color"

msgid ":obj:`reset_points <manim.mobject.types.point_cloud_mobject.PMobject.reset_points>`"
msgstr ":obj:`reset_points <manim.mobject.types.point_cloud_mobject.PMobject.reset_points>`"

msgid ":obj:`get_point_mobject <manim.mobject.types.point_cloud_mobject.PMobject.get_point_mobject>`"
msgstr ":obj:`get_point_mobject <manim.mobject.types.point_cloud_mobject.PMobject.get_point_mobject>`"

msgid ":obj:`get_color <manim.mobject.types.point_cloud_mobject.PMobject.get_color>`"
msgstr ":obj:`get_color <manim.mobject.types.point_cloud_mobject.PMobject.get_color>`"

msgid "PMobject"
msgstr "PMobject"

msgid ":obj:`get_all_rgbas <manim.mobject.types.point_cloud_mobject.PMobject.get_all_rgbas>`"
msgstr ":obj:`get_all_rgbas <manim.mobject.types.point_cloud_mobject.PMobject.get_all_rgbas>`"

msgid "Returns the color of the :class:`~.Mobject`"
msgstr "Returns the color of the :class:`~.Mobject`"

msgid "Condition is function which takes in one arguments, (x, y, z)."
msgstr "Condition is function which takes in one arguments, (x, y, z)."

msgid ":obj:`set_colors_by_radial_gradient <manim.mobject.types.point_cloud_mobject.PMobject.set_colors_by_radial_gradient>`"
msgstr ":obj:`set_colors_by_radial_gradient <manim.mobject.types.point_cloud_mobject.PMobject.set_colors_by_radial_gradient>`"

msgid ":obj:`filter_out <manim.mobject.types.point_cloud_mobject.PMobject.filter_out>`"
msgstr ":obj:`filter_out <manim.mobject.types.point_cloud_mobject.PMobject.filter_out>`"
