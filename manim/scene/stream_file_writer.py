from abc import ABCMeta

import os
import subprocess

from .. import config, logger
from ..constants import FFMPEG_BIN
from .scene import Scene
from .scene_file_writer import SceneFileWriter
from ..utils.file_ops import guarantee_existence


class StreamFileWriter(SceneFileWriter):
    """Specialized file writer for streaming.

    Takes a good portion of its implementation from `:class:~.SceneFileWriter`
    but changes enough of it to redirect output directories and the final
    request to the streaming protocol.

    .. seealso::

        :func:`~.stream_starter.livestream`
        :class:`~.SceneFileWriter`

    """

    def __init__(self, renderer):
        super().__init__(renderer, "")
        vars(self).update(config.streaming_config)
        path = os.path.join(config.get_dir("streaming_dir"), "clips")
        self.partial_movie_directory = os.path.relpath(guarantee_existence(path))

    def init_output_directories(self, scene_name):
        """Overridden to avoid creation of unnecessary output directories."""
        pass

    @property
    def file_path(self):
        """Returns the path of the most recent animation generated by the
        class. This is insignificant to the base class which has its own ways
        of acquiring this path.
        """
        self.partial_movie_files = list(filter(lambda item: item is not None, self.partial_movie_files))
        return self.partial_movie_files[self.renderer.num_plays]

    def end_animation(self, allow_write=False):
        """Closes the input buffer and streams the rendered partial movie file.

        Called at the end of the life cycle of an :class:`~.Animation`.

        """
        super().end_animation(allow_write=allow_write)
        self.stream()

    def combine_movie_files(self):
        """Overridden: not required for live streaming.

        .. seealso::

            :class:`~.SceneFileWriter`

        """
        pass

    def stream(self):
        """Stream the (partial) video file via the configured streaming protocol."""
        logger.info(
            "Houston, we are ready to launch. Sending over to %(url)s",
            {"url": {self.streaming_url}},
        )
        command = [
            FFMPEG_BIN,
            "-re",
            "-i",
            self.file_path,
            "-vcodec",
            "copy",
            "-an",
            "-loglevel",
            "quiet",
        ]

        if self.streaming_protocol == "rtp":
            command += ["-sdp_file", self.sdp_path]
        command += [
            "-f",
            self.streaming_protocol,  # Take a look here for other streaming protocols
            self.streaming_url,
        ]
        os.system(" ".join(command))

    def close_movie_pipe(self):
        self.writing_process.stdin.close()
        self.writing_process.wait()
        logger.info(
            f"Animation {self.renderer.num_plays}: File at %(path)s",
            {"path": {self.file_path}},
        )
