# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Manim Community Dev Team
# This file is distributed under the same license as the Manim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Manim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-16 22:10+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/tutorials/building_blocks.rst:3
msgid "Manim's building blocks"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:5
msgid ""
"This document explains the building blocks of manim and will give you all"
" the necessary tools to start producing your own videos."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:8
msgid ""
"Essentially, manim puts at your disposal three different concepts that "
"you can orchestrate together in order to produce mathematical animations:"
" the **mathematical object** (or **mobject** for short) the "
"**animation**, and the **scene**.  As we will see in the following "
"sections, each of these three concepts is implemented in manim as a "
"separate class: the :class:`.Mobject`, :class:`.Animation`, and "
":class:`.Scene` classes."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:15
msgid ""
"It is recommended that you read the tutorials :doc:`quickstart` and "
":doc:`a_deeper_look` before reading this page."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:21
msgid "Mobjects"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:23
msgid ""
"Mobjects are the basic building block for all manim animations.  Each "
"class that derives from :class:`.Mobject` represents an object that can "
"be displayed on screen.  For example, simple shapes such as "
":class:`.Circle`, :class:`.Arrow`, and :class:`.Rectangle` are all "
"mobjects.  More complicated constructs such as :class:`.Axes`, "
":class:`.FunctionGraph`, or :class:`.BarChart` are mobjects as well."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:30
msgid ""
"If you try to display on screen an instance of :class:`.Mobject`, you "
"will only see an empty frame.  The reason is that the :class:`.Mobject` "
"class is an abstract base class of all other mobjects, i.e. it does not "
"have any pre-determined visual shape that can be displayed on screen.  It"
" is only the skeleton of a thing that *could* be displayed.  Therefore, "
"you will rarely need to use plain instances of :class:`.Mobject`; instead"
" you will most likely create instances of its derived classes.  One of "
"these derived classes is :class:`.VMobject`.  The ``V`` stands for "
"Vectorized Mobject.  In essence, a vmobject is a mobject that uses vector"
" `vector graphics <https://en.wikipedia.org/wiki/Vector_graphics/>`_ to "
"be displayed.  Most of the time, you will be dealing with vmobjects, "
"though we will continue to use the term \"mobject\" to refer to the class"
" of shapes that can be displayed on screen, as it is more general."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:44
msgid ""
"Any object that can be displayed on screen is a ``mobject``, even if it "
"is not necessarily *mathematical* in nature."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:47
msgid ""
"To see examples of classes derived from :class:`.Mobject`, see the "
":mod:`.geometry` module.  Most of these are in fact derived from "
":class:`.VMobject` as well."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:53
msgid "Creating and displaying mobjects"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:55
msgid ""
"As explained in :doc:`quickstart`, usually all of the code in a manim "
"script is put inside the :meth:`.construct` method of a :class:`.Scene` "
"class. To display a mobject on the screen, call the :meth:`~.Scene.add` "
"method of the containing :class:`.Scene`.  This is the principal way of "
"displaying a mobject on the screen when it is not being animated.  To "
"remove a mobject from the screen, simply call the :meth:`~.Scene.remove` "
"method from the containing :class:`.Scene`."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:75
msgid "Placing mobjects"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:77
msgid ""
"Let's define a new :class:`.Scene` called ``Shapes`` and "
":meth:`~.Scene.add` some mobjects to it.  This script generates a static "
"picture that displays a circle, a square, and a triangle:"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:96
msgid ""
"By default, mobjects are placed at the center of coordinates, or "
"*origin*, when they are first created.  They are also given some default "
"colors.  Further, the ``Shapes`` scene places the mobjects by using the "
":meth:`.shift` method.  The square is shifted one unit in the ``UP`` "
"direction from the origin, while the circle and triangle are shifted one "
"unit ``LEFT`` and ``RIGHT``, respectively."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:102
msgid ""
"Unlike other graphics software, manim places the center of coordinates at"
" the center of the screen.  The positive vertical direction is up, and "
"the positive horizontal direction is right. See also the constants "
"``ORIGIN``, ``UP``, ``DOWN``, ``LEFT``, ``RIGHT``, and others, defined in"
" the :mod:`.constants` module."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:108
msgid ""
"There are many other possible ways to place mobjects on the screen, for "
"example :meth:`.move_to`, :meth:`.next_to`, and :meth:`.align_to`.  The "
"next scene ``MobjectPlacement`` uses all three."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:130
msgid ""
"The :meth:`.move_to` method uses absolute units (measured relative to the"
" ``ORIGIN``), while :meth:`.next_to` uses relative units (measured from "
"the mobject passed as the first argument).  :meth:`align_to` uses "
"``LEFT`` not as measuring units but as a way to determine the border to "
"use for alignment.  The coordinates of the borders of a mobject are "
"determined using an imaginary bounding box around it."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:137
msgid "Many methods in manim can be chained together.  For example the two lines"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:145
msgid "can be replaced by"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:151
msgid ""
"Technically, this is possible because most methods calls return the "
"modified mobject."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:155
msgid "Styling mobjects"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:157
msgid "The following scene changes the default aesthetics of the mobjects."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:174
msgid ""
"This scene uses two of the main functions that change the visual style of"
" a mobject: :meth:`.set_stroke` and :meth:`.set_fill`.  The former "
"changes the visual style of the mobject's border while the latter changes"
" the style of the interior.  By default, most mobjects have a fully "
"transparent interior so you must specify the ``opacity`` parameter in "
"order to display the color.  An opacity of ``1.0`` means fully opaque, "
"while ``0.0`` means fully transparent."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:181
msgid ""
"Only instances of :class:`.VMobject` implement :meth:`.set_stroke` and "
":meth:`.set_fill`.  Instances of :class:`.Mobject` implement "
":meth:`.~Mobject.set_color` instead.  The vast majority of pre-defined "
"classes are derived from :class:`.VMobject` so it is usually safe to "
"assume that you have access to :meth:`.set_stroke` and :meth:`.set_fill`."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:189
msgid "Mobject on-screen order"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:191
msgid ""
"The next scene is exactly the same as the ``MobjectStyling`` scene from "
"the previous section, except for exactly one line."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:209
msgid ""
"The only difference here (besides the scene name) is the order in which "
"the mobjects are added to the scene.  In ``MobjectStyling``, we added "
"them as ``add(circle, square, triangle)``, whereas in ``MobjectZOrder`` "
"we add them as ``add(triangle, square, circle)``."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:214
msgid ""
"As you can see, the order of the arguments of :meth:`~.Scene.add` "
"determines the order that the mobjects are displayed on screen, with the "
"left-most arguments being put in the back."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:221
msgid "Animations"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:223
msgid ""
"At the heart of manim is animation.  Generally, you can add an animation "
"to your scene by calling the :meth:`~.Scene.play` method."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:244
msgid ""
"Put simply, animations are procedures that interpolate between two "
"mobjects. For example, :code:`FadeIn(square)` starts with a fully "
"transparent version of :code:`square` and ends with a fully opaque "
"version, interpolating between them by gradually increasing the opacity."
"  :class:`.FadeOut` works in the opposite way: it interpolates from fully"
" opaque to fully transparent.  As another example, :class:`.Rotate` "
"starts with the mobject passed to it as argument, and ends with the same "
"object but rotated by a certain amount, this time interpolating the "
"mobject's angle instead of its opacity."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:255
msgid "Animating methods"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:257
msgid ""
"Any property of a mobject that can be changed can be animated.  In fact, "
"any method that changes a mobject's property can be used as an animation,"
" through the use of :class:`.ApplyMethod`."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:276
msgid ""
":meth:`.ApplyMethod` receives one mandatory argument which is the method "
"of the mobject to animate (e.g. :code:`square.set_fill` or "
":code:`square.shift`), and any number of optional arguments which are "
"then passed to the method call.  For example, "
":code:`ApplyMethod(square.shift, UP)` executes :code:`square.shift(UP)`, "
"but animates it instead of applying it immediately."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:283
msgid "Animation run time"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:285
msgid ""
"By default, any animation passed to :meth:`play` lasts for exactly one "
"second. Use the :code:`run_time` argument to control the duration."
msgstr ""

#: ../../source/tutorials/building_blocks.rst:300
msgid "Scenes"
msgstr ""

#: ../../source/tutorials/building_blocks.rst:302
msgid ""
"The :class:`.Scene` class is the connective tissue of manim.  Every "
"mobject has to be :meth:`added <.Scene.add>` to a scene to be displayed, "
"or :meth:`removed <.Scene.remove>` from it to cease being displayed.  "
"Every animation has to be :meth:`played <.Scene.play>` by a scene, and "
"every time interval where no animation occurs is determined by a call to "
":meth:`~.Scene.wait`.  All of the code of your video must be contained in"
" the :meth:`~.Scene.construct` method of a class that derives from "
":class:`.Scene`.  Finally, a single file may contain multiple "
":class:`.Scene` subclasses in the event that multiple scenes are to be "
"rendered at the same time."
msgstr ""
