# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Manim Community Dev Team
# This file is distributed under the same license as the Manim package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Manim \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-13 01:28+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../source/installation/plugins.rst:5
msgid "Plugins"
msgstr ""

#: ../../source/installation/plugins.rst:7
msgid ""
"Plugins are features that extend Manim's core functionality. Since Manim "
"is extensible and not everything belongs in its core, we'll go over how "
"to install, use, and create your own plugins."
msgstr ""

#: ../../source/installation/plugins.rst:13
msgid ""
"The standard naming convention for plugins is to prefix the plugin with "
"``manim-``. This makes them easy for users to find on package "
"repositories such as PyPI."
msgstr ""

#: ../../source/installation/plugins.rst:19
msgid ""
"The plugin feature is new and under active development. Expect updates "
"for the best practices on installing, using, and creating plugins; as "
"well as new subcommands/flags for ``manim plugins``"
msgstr ""

#: ../../source/installation/plugins.rst:24
msgid "Installing Plugins"
msgstr ""

#: ../../source/installation/plugins.rst:25
msgid "Plugins can be easily installed via the ``pip`` command:"
msgstr ""

#: ../../source/installation/plugins.rst:32
msgid ""
"After installing a plugin, you may use the ``manim plugins`` command to "
"list your available plugins, see the following help output:"
msgstr ""

#: ../../source/installation/plugins.rst:48
msgid "You can list plugins as such:"
msgstr ""

#: ../../source/installation/plugins.rst:57
msgid "Using Plugins in Projects"
msgstr ""

#: ../../source/installation/plugins.rst:58
msgid ""
"Plugins specified in ``plugins/__init__.py`` are imported automatically "
"by manim's ``__init__.py``. As such, writing:"
msgstr ""

#: ../../source/installation/plugins.rst:65
msgid ""
"in your projects will import any of the plugins imported in "
"``plugins/__init__.py``."
msgstr ""

#: ../../source/installation/plugins.rst:68
msgid ""
"By default, ``plugins/__init__.py`` is not provided; although, there are "
"plans to support subcommands that would manage this file. It is "
"especially useful to create this file for projects that involve usage of "
"the same plugins. Alternatively, you may manually specify the plugins in "
"your project scripts."
msgstr ""

#: ../../source/installation/plugins.rst:81
msgid "Creating Plugins"
msgstr ""

#: ../../source/installation/plugins.rst:82
msgid ""
"Plugins are intended to extend Manim's core functionality. If you aren't "
"sure whether a feature should be included in Manim's core, feel free to "
"ask over on the `Discord server <https://discord.gg/mMRrZQW>`_. Visit "
"`manim-plugintemplate <https://pypi.org/project/manim-plugintemplate/>`_ "
"on PyPI.org which serves as an in-depth tutorial for creating plugins."
msgstr ""

#: ../../source/installation/plugins.rst:92
msgid ""
"The only requirement of manim plugins is that they specify an entry point"
" with the group, ``\"manim.plugins\"``. This allows Manim to discover "
"plugins available in the user's environment. Everything regarding the "
"plugin's directory structure, build system, and naming are completely up "
"to your discretion as an author. The aforementioned template plugin, is "
"only a model using Poetry since this is the build system Manim uses. The "
"plugin's `entry point <https://packaging.python.org/specifications/entry-"
"points/>`_ can be specified in poetry as:"
msgstr ""


